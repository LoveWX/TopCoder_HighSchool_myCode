#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MOD=77077;
int len;
string thespell;
string therule;
int maxpower;
string maxspell;

bool isPowerful(int &power,string &str)
{
	if(str.length()==0)
		return false;
	if(power>maxpower)
		return true;
	if(power<maxpower)
		return false;
	if(str.length()==maxspell.length())
		return str<maxspell;
	return str.length()<maxspell.length();
}

void check(int pos,int power,string str)
{
	if(pos==len)
	{
		if(isPowerful(power,str))
		{
			maxpower=power;
			maxspell=str;
		}
		return;
	}
	check(pos+1,power,str);
	char ch[2];
	ch[1]='\0';
	ch[0]=thespell[pos];
	int p=thespell[pos]-'A'+1;
	check(pos+1,power*p%MOD,str+ch);
	p=thespell[pos]-'A';
	if(therule[p]!='-')
	{
		ch[0]=therule[p];
		p=therule[p]-'A'+1;
		check(pos+1,power*p%MOD,str+ch);
	}
}

class Wizarding
{
public:
	string counterspell(string spell, string rules)
	{
		therule=rules;
		for(len=0;len<26;len++)
		{
			if(rules[len]=='A'+len)
			{
				therule[len]='-';
			}
		}
		thespell=spell;
		len=thespell.length();
		maxpower=-1;
		check(0,1,string(""));
		return maxspell;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	Wizarding *obj;
	string answer;
	obj = new Wizarding();
	clock_t startTime = clock();
	answer = obj->counterspell(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "AA";
	p1 = "Z-------------------------";
	p2 = "ZZ";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AB";
	p1 = "ZS------------------------";
	p2 = "ZS";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ZZZZ";
	p1 = "-------------------------Z";
	p2 = "ZZZZ";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ABCDE";
	p1 = "ZYXXYXZZXYXXZZXZYYXZZZX---";
	p2 = "ZXXE";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ABCDEABCDEABC";
	p1 = "ACBDESKADSLOEDDDASDBADEDAE";
	p2 = "CCDECCECC";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
